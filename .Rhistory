m
}
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)%*%c
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverese = setinverese,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverese = setinverese,
getinverse = getinverse)
}
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverese,
getinverse = getinverse)
}
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(a)
cacheSolve(a)
setinverse(10)
a$setinverse(10)
chacheSolve(a)
cacheSolve(a)
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
b<-rbind(c(1, -1/4), c(-1/4, 1))
solve(b)
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
getinverse(a)
a$getinverse()
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
a$getinverse()
cacheSolve(a)
cacheSolve(a)
getwd()
cd..
getwd()
ls
setwd("C:/Users/vgalvan/repos/pa2/ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix(c=rbind(c(1, -1/4), c(-1/4, 1)))
a<-makeCacheMatrix(c=rbind(c(1, -1/4), c(-1/4, 1)))
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve(a)
a$setinverse(10)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
a<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve(a)
load("C:/Users/vgalvan/repos/pa2/ProgrammingAssignment2/.RData")
a
a
a <- makeCacheMatrix <- function(rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
a <- makeCacheMatrix <- function(rbind(c(1, -1/4), c(-1/4, 1)))
a <- makeCacheMatrix() <- function(rbind(c(1, -1/4), c(-1/4, 1)))
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a
a$get()
makeCacheMatrix <- function(x = matrix()) {
##        m <- NULL
##        set <- function(y) {
##                x <<- y
##                m <<- NULL
##        }
data <- function() x
m <<- solve(data, ...)
##        get <- function() x
##        setinverse <- function(inverse) m <<- inverse
##        getinverse <- function() m
##        list(set = set, get = get,
##             setinverse = setinverse,
##             getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
##        m <- NULL
##        set <- function(y) {
##                x <<- y
##                m <<- NULL
##        }
data <- function() x
m <<- solve(data, ...)
##        get <- function() x
##        setinverse <- function(inverse) m <<- inverse
##        getinverse <- function() m
##        list(set = set, get = get,
##             setinverse = setinverse,
##             getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##        set <- function(y) {
##                x <<- y
##                m <<- NULL
##        }
data <- function() x
m <<- solve(data, ...)
##        get <- function() x
##        setinverse <- function(inverse) m <<- inverse
##        getinverse <- function() m
##        list(set = set, get = get,
##             setinverse = setinverse,
##             getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
debug(a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1))))
undebug(a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1))))
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##        set <- function(y) {
##                x <<- y
##                m <<- NULL
##        }
data <- function() x
m <<- solve(data)
##        get <- function() x
##        setinverse <- function(inverse) m <<- inverse
##        getinverse <- function() m
##        list(set = set, get = get,
##             setinverse = setinverse,
##             getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
as.vector(data)
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is used to get the matrix by cacheSolve
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is used to get the matrix by cacheSolve
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is used to get the matrix by cacheSolve
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is used to get the matrix by cacheSolve
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a$get()
cacheSolve <- function(x, ...) {
m <- x$getinverse()           ##verify the value m, stored previously with setinverse
if(!is.null(m)) {             ##If it exists in memory, returns a message and the value m
message("getting cached data")
return(m)
}
data <- x$get()      ## gets the matrix stored by makeCacheMatrix
m <- solve(data, ...)## inverses the matrix
x$setinverse(m)      ## stores the result in the object generated-assigned with makeCacheMatrix
m                    ## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
m <- solve(x)
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
m <- solve(x)
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve <- function(x, ...) {
m <- x$getinverse()           ##verify the value m, stored previously with setinverse
if(!is.null(m)) {             ##If it exists in memory, returns a message and the value m
message("getting cached data")
return(m)
}
data <- x$get()      ## gets the matrix stored by makeCacheMatrix
m <- solve(data, ...)## inverses the matrix
x$setinverse(m)      ## stores the result in the object generated-assigned with makeCacheMatrix
m                    ## Return a matrix that is the inverse of 'x'
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
m <- solve(x)
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a
makeCacheMatrix <- function(x = matrix()) {
##m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##set <- function(y) {
##        x <<- y
##        m <<- NULL
## }
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a
cacheSolve(a)
makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x                     ##get is a function used by cacheSolve to get the matrix stored by makeCacheMatrix
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
##list(set = set, get = get,
list(set=set, get=get,
setinverse = setinverse,
getinverse = getinverse)
m
}
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
a
## This code is an adaptation of the example code "Caching the Mean of a Vector"
## for "Caching the Inverse of a Matrix"
## makeCacheMatrix
## This function creates a special "matrix" object that can cache its inverse. It works together
## with the function cacheSolve to obtain the inverse of invetible matrices
## Instructions:
## An iversible matrix like "rbind(c(1, -1/4), c(-1/4, 1))" has to be entered to the function
## The result is asigned to an object like "a" to be used later by the function cacheSolve
##
##     example:                 a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
makeCacheMatrix <- function(x = matrix()) {            ## vector replaced by matrix
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse   ## setmean repleaced by setinverse
getinverse <- function() m                      ## getmean replaced by getinverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)          ## mean function replaced by solve function
x$setinverse(m)
m
## m is a matrix that is the inverse of 'x'
}
source("cacheSolve")
source("cacheSolve.R")
getwed
getwd()
source(cachematrix.R)
source("cachematrix.R")
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve(a)
a <- makeCacheMatrix (rbind(c(2, 3), c(3, 2)))
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix (rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(a)
cacheSolve(a)
